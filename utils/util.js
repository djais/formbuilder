/*******************************************
**   util.js
**    Author : Rahul Mishra
**    email : rahul@rytangle.com
**   Purpose : set of functions that perform
**             common tasks for other APIs
**
********************************************/

var conf = require('../conf');
var crypto = require('crypto');
var moment = require('moment-timezone');
var request = require('request');
var io = require('socket.io-client');

// global constants
var sockSrc = "v5ihh7rom61nozbi7uth";
var socket = io("http://localhost:12100");


module.exports.genId = genId;
module.exports.logger = logger;
module.exports.addEvent = addEvent;
module.exports.sendMail = sendMail ;
module.exports.addCustomer = addCustomer;

function addEvent(app, event, gid, player, playerid, detail, source){
  /*
  ** app : app offered. like feedback, bot, customer etc.
  ** event : nature of event like visit, buying, feedback, reservation etc.
  ** player : event is generated by whom like customer, user or some other thing.
  ** playerId : id of the player
  ** detail : the entire data set of the event that is written
  */
  var events = conf.events.collection('events');
  var eventConst = {};
  detail.source = source;
  if(!gid)
  {
    console.log('no event logged : No gid');
    return
  }
  var gap = 3600;
  var time = moment().unix() - 3600;
if(!detail.ts)
	detail.ts = moment().unix();
  if(event == 'visit')
  {
	var q = {event:'visit', loc:detail.loc, ts:{$gt:time}};
      if(detail.source =='wifi' && !detail.custid)
	     q.handsetid = detail.handsetid || "";
      else
	     q.playerid  = detail.custid
      events.find(q).toArray(function(e,d){
	console.log("in Visit",d);
        if(!d.length)
          writeEvent(app, event, gid, player, playerid, detail);
      });// events.find
  }
  else{
    writeEvent(app, event, gid, player, playerid, detail)
      }
}//addEvent


//------------sendEMailTrigger()-------------
function sendEMailTrigger(data, gid, detail, event, playerid, player){
  var html = '';
  var txt='';
  var frm = '';
  console.log("email trigger for feedback .....");
  switch(event){
    case 'feedback':
      if(detail.sentiment == 'positive' && data.sentiment!='*')
        return;
      var head={cust:false,concerns:false};
      if(data.fromname)
        frm = data.fromname+'<support@rytangle.com>';
      else {
        frm = "Rytangle Feedback <support@rytangle.com>"
      }
      var sub = "Attention : Feedback at "+detail.loc;
      for(var i in detail.user)
      {
          if(!head.cust)
          {
            //html = html+'<br><hr></br>';
            html = html+'<div><b> Customer Details </b> <div>';
            txt = txt+ '\n-----------------\n'
            txt = txt+'Customer Details \n';
            txt = txt+'----------------\n'
            head.cust = true;
          }
/*          switch(i)
          {
            case 'name':
            case 'email':
            case 'phone':*/
              html = html+'<div> '+i+' : <b>'+detail.user[i] + '</b></div>';
              txt = txt+i+' : '+detail.user[i]+'\n';
//            break;
  //        }
      }
      // show the top concerns of the customer
      for(var i in detail.concerns)
      {
        if(!head.concerns)
        {
          html = html+'<hr>';
          html = html+'<div> <b> Customer Concerns </b> <div>';
          txt = txt+ '\n-----------------\n'
          txt = txt +'Customer Concerns\n'
          txt = txt+ '-----------------\n'
          head.concerns = true;
        }
        html = html+'<div>'+detail.concerns[i].toString()+'</div>';
        txt = txt+ detail.concerns[i].toString()+'\n';
      }
      // show the feedback details customer filled
      html = html+'<hr>';
      html = html+'<div><b> Feedback Details </b> <div>';
      txt = txt+ '\n-----------------\n'
      txt = txt +'Feedback Details\n'
      txt = txt+ '----------------\n'
      for(var i in detail.parameters)
      {
        if(detail.parameters[i].val)
        {
          html = html+'<div> '+detail.parameters[i].que+' : <b>'+detail.parameters[i].val + '</b></div>';
          txt = txt+detail.parameters[i].que+' : '+detail.parameters[i].val + '\n';
          if(detail.parameters[i].desc)
          {
            html = html+'<div> Details :  <b>'+detail.parameters[i].desc.toString() + '</b> </div>';
            txt = txt+'Details : '+detail.parameters[i].desc.toString() + '\n';
          }
        }
      }
      sendMail(html, txt, [], data.email , frm, sub);
      break;
    default:
      // emails are sent only on negative feedbacks
      break;
  }
}//sendEMailTrigger

//////////////////////////////////////////

function sendConfEmail(data, event, gid, detail, playerid, player){
  var html = '';
  var txt='';
  var frm = '';
  console.log("email conf for customer .....", event, detail);
  switch(event){
    case 'feedback':
      var head={cust:false,concerns:false};
      if(data.name)
        frm = data.name+' Feedback <support@rytangle.com>';
      else {
        frm = "Rytangle Feedback <support@rytangle.com>"
      }
      var sub = "Thank you for your feedback";
      html =html+ "<p>Dear <b>"+detail.name+",</b><br>";
      txt += "Dear "+detail.name+"\n";
      if(detail.sentiment == 'positive')
      {
        html =html+"Thank you for taking valuable time to help us in serving you better.<br>Your Feedback has been passed on to the respective team & we look forward to your next visit. <br>Best wishes,<br>"+data.name+" Team"
        txt += "Thank you for taking valuable time to help us in serving you better.\nYour Feedback has been passed on to the respective team & we look forward to your next visit. \nBest wishes,\n"+data.name+" Team"
      }
      else {
          html =html+"Thank you for taking valuable time to help us in serving you better.<br>Your Feedback has been passed on to the respective team & we look forward to your next visit. <br>Best wishes,<br>"+data.name+" Team"
          txt += "Thank you for taking valuable time to help us in serving you better.\nYour Feedback has been passed on to the respective team & we look forward to your next visit. \nBest wishes,\n"+data.name+" Team";
      }
      sendMail(html, txt, [], detail.email , frm, sub);
      break;
    default:
      // emails are sent only on negative feedbacks
      break;
  }
}//sendConfEmail


////////////////////////////////////////////////////

function sendMail(html, txt, attach, to ,frm, subject){
  console.log("here in Send mail");
  var mail={
    to : to,
    frm:frm,
    sub : subject,
    txt : txt,
    html : html,
    status : 0,
    attmpt:0,
    type: "email",
    tags: "trigger",
    msg:"",
    attachments: attach,
    reqTS:moment().unix()
  }
  var notif = conf.rytdb.collection('notifications');
  notif.insert(mail, function(err, docs) {
    // Do nothing.
  })
};//sendMail

//---------------sendConfSms()

function sendConfSms(data,event, gid, detail, playerid, player){
  var customers = conf.rytdb.collection('customers');
  var logs = conf.logs.collection('sms');
  var url = 'http://api-alerts.solutionsinfini.com/v3/?method=sms&api_key=Ae2f91e136fda76af0465d350801a9279';
  url +="&to="+detail.phone;
  var sender = "";
  if(data.sender)
	sender = data.sender;
  else
	sender= 'RTANGL';
  url +="&sender="+sender;
  url +="&message=";
  var cust = detail.name || "";
  if(cust)
    cust = "Dear "+cust;
  switch(event){
    case 'feedback':
        if(detail.sentiment == 'negative')
        {

          url += cust+" Thanks for taking valuable time to help us serve you better.Your Feedback has been passed on to the respective team and we look forward to your next visit. "+data.name+" Team"
        }
        else {
          url +=cust+" Thanks for taking valuable time to help us serve you better.Your Feedback has been passed on to the respective team and we look forward to your next visit. "+data.name+" Team"
        }
        request(url,function(error, response, body) {
            console.log("response of feedback sms request");
            // write to logs db
            var logData = {};
            logData.sender = sender;
            logData.ts = moment().unix();
            logData.to = detail.phone;
            logData.count = 1;
            logData.url = url;
            logData.for = 'feedback';
            logData.response = response.body;
            logData.gid = gid;
            logData.type='confirm';
            logs.insert(logData, function(er,d){
              // data inserted in logs nothing to do
            });
          });// request
      break;
    default:
      //do nothing
      break;
  }
}//sendConfSms

//////////////////////////////////////////


function sendSMS(data, gid, detail, event, playerid, player){
  // send sms utility. At present it is default templates.
  // TODO: Make it smarter
  console.log("******************sendSMS called****************")
  console.log("Sending SMS trigger",detail, event);
  var customers = conf.rytdb.collection('customers');
  var logs = conf.logs.collection('sms');
  var url = 'http://api-alerts.solutionsinfini.com/v3/?method=sms&api_key=Ae2f91e136fda76af0465d350801a9279';
  url +="&to="+data.sms.toString();
  var sender = "";
  if(data.sender)
	sender = data.sender;
  else
	sender= 'RTANGL';
  url +="&sender="+sender;
  url +="&message=";
  switch(event){
    case 'feedback':
        url +='Feedback from '+detail.name+' requires your attention! The concerns are '+detail.concerns.toString()+'. Phone number : '+detail.phone+' and email is '+detail.email;
        if(detail.sentiment == 'negative' || data.sentiment=="*")
        {
        request(url,function(error, response, body) {
            console.log("response of feedback sms request");
            // write to logs db
            var logData = {};
            logData.sender = sender;
            logData.ts = moment().unix();
            logData.to = data.sms;
            logData.count = data.sms.length;
            logData.url = url;
            logData.for = 'feedback';
            logData.response = response.body;
            logData.gid = gid;
            logData.type='trigger';
            logs.insert(logData, function(er,d){
              // data inserted in logs nothing to do
            });
          });// request
        }
      break;
    case 'visit':
        if(player=='customer')
        {
          customers.find({custid:playerid}).toArray(function(err, dt){
            if(err || !dt)
              return; // do nothing. no customer data
            url += dt[0].name+' has just walked in!!!'
            request(url,function(error, response, body) {
                console.log("response of arrival sms request");
                // write to logs db
                var logData = {};
                logData.sender = data.sender || 'RTANGL';
                logData.ts = moment().unix();
                logData.to = data.sms;
                logData.url = url;
                logData.type = 'trigger';
                logData.for = 'visit';
                logData.count = data.sms.length;
                logData.response = response.body;
                logData.gid = gid;
                logs.insert(logData, function(er,d){
                  // data inserted in  nothing to do
                });
              });// request
          });// customer find
        }
      break;
    default:
      break;
  }

}//sendSMS


//// -----------Send confirmation messages -------------------

function sendConf(event, gid, detail, playerid, player){
  console.log("sending confirmation", detail);
  var group = conf.rytdb.collection('groups');
  // if there is setting for confirmation messages to be sent to the user  then send the messages
  group.find({gid:gid},{settings:1,name:1,sender:1}).toArray(function(err, data){
    if(err || !data.length)
      return;
    console.log(data[0]);
    if((moment().unix()-detail.ts) > 2*60*60)
      return; // do not send customer any update after 2 hrs.
    if(!data[0].hasOwnProperty('settings'))
      return;
    if(!data[0].settings.hasOwnProperty('confirm'))
      return;
    if(!data[0].settings.confirm[event])
      return;
    for(var i in data[0].settings.confirm[event])
    {
      switch(data[0].settings.confirm[event][i])
      {
        case 'email':
          console.log("here in email");
          sendConfEmail(data[0],event, gid, detail, playerid, player);
          break;
        case 'sms':
          sendConfSms(data[0],event, gid, detail, playerid, player)
          break;
        default:

          break;
      }

    }

  });//find
};// sendConf
//////////////////////////////////////////

//----------Send on Socket----
function sendOnSocket(custData,gid, trigloc, event, detail){
    var sockData = {h:{src:sockSrc, dest:"", gid:gid},d:{msg:"",name:"",ts:moment().unix()}};
    db.users.find({$or:[{role:{$lt:2}, gid:gid},{role:{$gt:1}, gid:gid, regions:trigloc},{email:"rahul@rytangle.com"}]},{apikey:1})
      .toArray(function(e,data){
          if(e || !data.length)
           return;
          else {
            switch(event){
              case 'feedback':
                  for(var i in data)
                  {
                    sockData.h.dest="MgrApp_"+gid+"_"+data[i].apikey;
                    sockData.d.msg = 'Feedback from '+detail.name+' requires your attention! The concerns are '+detail.concerns.toString()+'. Phone number : '+detail.phone+' and email is '+detail.email;
                    sockData.d.name = detail.name;
                    socket.emit("ryt_adapter_msg",data);
                  }
                break;
              case "visit":
                  for(var i in data)
                  {
                    sockData.h.dest="MgrApp_"+gid+"_"+data[i].apikey;
                    sockData.d.msg = "Just walked in at "+trigloc;
                    sockData.d.name = custData.name;
                    socket.emit("ryt_adapter_msg",data);
                  }
                break;
              default:
                break;
            }
          }
      })

}

//-----------sendTrigger
function sendTrigger(event, gid, detail,playerid, player){
      console.log("here...in trigger",detail)
    var trigger = conf.rytdb.collection('triggers');
    var feedback = conf.rytdb.collection("userFeedbacks.db");
    var customer = conf.rytdb.collection("customers")
    var users = conf.rytdb.collection("users");
    var trigloc = detail.loc;
    if(!detail.ts)
      return; // if there is no ts we cannot evaluate when event occurred.
    var tgap = detail.ts - moment().unix();

    if(tgap<120)
    {
      // within 2 minutes of event send notification on socket
      if(event=="visit")
      {
        customers.find({custid:playerid}).toArray(function(err, dt){
          if(err || !dt)
            return; // do nothing. no customer data
          sendOnSocket(dt[0],gid, trigloc, event, detail);
        });// customers. find
      }
      else {
        sendOnSocket({}, gid, trigloc, event, detail);
      }
    } // end of socket code

    trigloc = trigloc.toLowerCase().replace(/[^0-9a-z]/gi, '');
    trigloc = trigloc.split(' ').join('');
    trigger.find({event:event, gid:gid, loc:{$in:[trigloc, "*"]}},{_id:0}).toArray(function(err, data){
      console.log("here...",detail, data)
      if(err || !data.length)
        return;
      if(data[0].type=="immediate" && tgap>120)
        return; // if the event has happened over 2 minutes ago do not send trigger.
      if(data[0].sms)
        sendSMS(data[0],gid, detail,event, playerid, player);
      if(data[0].email && event=="feedback")
        {
          feedback.find({id:detail.ref}).toArray(function(e, d){
            if(e||!d.length)
              return;
            sendEMailTrigger(data[0],gid,d[0],event, playerid, player);
          })
        }
    });//find Trigger
}//sendTrigger
////////////////////////////////////////

function genId(len){
  // generates a random id of hex type of length - len
  if(!len)
    len = 30;
  return crypto.randomBytes(Math.ceil(len/2))
      .toString('hex') // convert to hexadecimal format
      .slice(0,len);
}//genId
///////////////////////////////////////////////////


function logger(text){
  console.log('Time: ', moment(Date.now()).format("DD-MM-YYYY HH:mm Z") + " "+ text)
};//logger
////////////////////////////////////////

// app, appItemid, feedback, player, updateEvent(t/f), event
function addCustomer(app,event, appid, data, player, updateEvent, collection, db){
  /*
  **  Add customer from other sources. then write back cust ID to the event.
  **  We try to ensure that phone number of the customers in customer database remain unique.
  **  top priority is a reliable source. like facebook, email, sms etc. we check it from a constants database.
  **    if customer is changing data from a reliable source we update any data provided by the customer.
  **  if source is not reliable like Wifi or App(feedback app) update based on phone record. If phone number matches
  **      then we can update that whole customer record. If phone number is not provided and source id and some id like email
  **      matches we update the record of the customer else create a new record.
  **
  **  some key fields in the customer db name. phone, email, source{},complete(t/f), lastTs, creationTs, custid, leadsource
  */

  //get source reliability
  var constants = conf.events.collection('sources');
  var events = conf.events.collection('constants');
  var write_data = data.user;
  write_data.gid = data.gid;
  write_data.loc = data.loc;
  write_data.ts = data.ts;
  write_data.source = {};
  var lastTs ;
  if(!data.ts)
    lastTs= moment().unix();
  else {
      lastTs = data.ts;
  }
  write_data.source[data.source] = {id:data.user.id, lastTs:lastTs};
  write_data.lastTs = lastTs;
  //console.log(app +  event);
  events.find({app:app, event:event}).toArray(function(e,d){
    //console.log("here", d);
    if(d.length)
    {
      write_data.ref = data[d[0].ref]
      for(var i in d[0].details)
      {
        write_data[d[0].details[i]] = data[d[0].details[i]];
      }
      constants.find({source:data.source}).toArray(function(e,dt){
        if(e || !dt.length || !dt[0].reliable)
        {
          //assume source is not reliable;
          updateUnreliable(app, event, appid, write_data, player,updateEvent, collection, db, data.source )
          return;
        }
        updateReliable(app,event,appid, write_data, player, updateEvent, collection, db, data.source);
      });
    }
  })
};// addCustomer



// //////////////////general functions/////////////////

// ------------------ Update Reliable --------------------

function updateReliable(app,event, appid, data, player, updateEvent, collection, db, source){
  var customer  = conf.rytdb.collection('customers');
  var query = {gid:data.gid}; var newcust = genId(30);
  //console.log(data);
  if(data.phone)
  {
    // if phone is provided update an existing record.
    query.phone = data.phone;
  }
  else if(data.source)
  {
    query['source.'+source+'.id'] = data.source.id;
  }
  var sort = {lastTs:-1};
  var sourceid = data.id;
  delete data.source; delete data.id;
  data.lastTs = moment().unix();
  // find if phone number exists or the reliable source Id exists.
  customer.find(query).sort(sort).toArray(function(err, dt){
    if(err)
      return; // do nothing
    if(!dt.length)
    {
      if(data.phone)
      {
        query = {};
        query['source.'+source+'.id'] = sourceid;
        customer.find(query).sort(sort).toArray(function(e, d){
          if(e)
            return ;
          if(!d.length)
            {
              data.creationTs = data.lastTs;
              data.custid = newcust;
              data.leadsource = source;
              data.source = {};
              data.source[source]={"id":sourceid, lastTs:data.lastTs};
              customer.insert(data, function(e,d){
                if(!e)
                {
                  if(data.loc)
                  {
                    addEvent('visits', 'visit', data.gid, player, data.custid, data, source);
                  }
                  addEvent('customer', 'create' , data.gid, player, data.custid, data, source);
                  addEvent(app, event , data.gid, player, data.custid, data, source);
                  col = conf[db].collection(collection);
                  col.findAndModify({id:appid},{},{$set:{custid: data.custid}},{upsert:true}, function(e,d){
                    //do nothing. assume all went well;
                  });
                  return ;
                }
                return;
              })
            }else {
              var updates = [];
              for(var i in data)
              {
                if(d[0][i] && (i != 'loc' || i!='lastTs')) // loc of data update has no value in profile
                {
                  if(d[0][i] != data[i])
                    updates.push(i);
                }
              }
              data.updates = updates;
              data['source.'+source] = {id:sourceid, lastTs:data.lastTs};
              customer.update({custid:d[0].custid},{$set:data, $inc:{interactions:1}},{upsert:true}, function(e,response){
                if(!e)
                {
                  if(data.loc)
                  {
                    addEvent('visits', 'visit', data.gid, player, d[0].custid, data, source);
                  }
                  addEvent('customer', 'update' , data.gid, player, d[0].custid, data, source);
                  addEvent(app, event , data.gid, player, d[0].custid, data, source);
                  col = conf[db].collection(collection);
                  col.findAndModify({id:appid},{},{$set:{custid: d[0].custid}},{upsert:true}, function(e,d){
                    //do nothing. assume all went well;
                  });
                  return;
                }
                console.log(e)
                return;
              });// update
            }//else
        });// check for source id
      }
      else {
        data.creationTs = data.lastTs;
        data.custid = newcust;
        data.leadsource = source;
        data.source = {};
        data.source[source]={"id":sourceid, lastTs:data.lastTs};
        customer.insert(data, function(e,d){
          if(!e)
          {
            if(data.loc)
            {
              addEvent('visits', 'visit', data.gid, player, data.custid, data, source);
            }
            addEvent('customer', 'create' , data.gid, player, data.custid, data, source);
            addEvent(app, event , data.gid, player, data.custid, data, source);
            col = conf[db].collection(collection);
            col.findAndModify({id:appid},{},{$set:{custid: data.custid}},{upsert:true}, function(e,d){
              //do nothing. assume all went well;
            });
            return;
          }
          return;
        })
      }
    }// if dt[0] - no data
    else {
      var updates = [];
      for(var i in data)
      {
        if(dt[0][i] && (i != 'loc' || i!='lastTs')) // loc of data update has no value in profile
        {
          if(dt[0][i] != data[i])
            updates.push(i);
        }
      }
      data.updates = updates;
      data['source.'+source] = {id:sourceid, lastTs:data.lastTs};
      customer.update({custid:dt[0].custid},{$set:data, $inc:{interactions:1}},{upsert:true}, function(e,d){
        if(!e)
        {
          if(data.loc)
          {
            addEvent('visits', 'visit', data.gid, player, dt[0].custid, data, source);
          }
          addEvent('customer', 'update' , data.gid, player, dt[0].custid, data, source);
          addEvent(app, event , data.gid, player, dt[0].custid, data, source);
          col = conf[db].collection(collection);
          col.findAndModify({id:appid},{},{$set:{custid: dt[0].custid}},{upsert:true}, function(e,d){
            //do nothing. assume all went well;
          });
        }
      });// update
    }
  });// find record.
}// updateReliable


//------------------- update Unrealiable ---------------------

function updateUnreliable(app,event, appid, data, player, updateEvent, collection, database, source){
  var customer  = conf.rytdb.collection('customers');
  var query = {gid:data.gid}; var newcust = genId(30);
  data.lastTs = moment().unix();
  console.log("SOURCE....",source)
  if(data.phone)
  {
    // if phone is provided update an existing record.
    query.phone = data.phone;
  }
  else if(data.email) {
    // if email is provided check for last updated email record
    query.email = data.email;
  }
  else {
    query.source={};
    query.source[source].id = data.id;
  }
  var db = {};
  db['$setOnInsert'] = {
    creationTs: data.lastTs,
    custid:newcust,
    leadsource: source,
    source:{}
  };
  db['$setOnInsert'].source[source] = {id: data.id, lastTs: data.lastTs };
  var sort = {lastTs:-1};
  var sourceid = data.id;
  delete data.source; delete data.id;
  db['$set'] = data;
  db['$inc'] = {interactions:1};
  customer.findAndModify(query,sort,db,
  {upsert:true,new:true}, function(err, dt){
	console.log(dt);
    if(err)
    {
      return;
    }
    console.log(data);
    if(dt.value.loc)
    {
      addEvent('visits', 'visit', dt.value.gid, player, dt.value.custid, dt.value, source);
    }
    data.updates = [];
    addEvent('customer', 'update' , data.gid, player, dt.value.custid, data, source);
    col = conf[database].collection(collection);
    col.findAndModify({id:appid},{},{$set:{custid: dt.value.custid}},{upsert:true}, function(e,d){
      addEvent(app, event , data.gid, player, dt.value.custid, data,source);
      //do nothing. assume all went well;
    });
  });//findAndModify
};// updateUnreliable

// - ----- Delete below this ------------

//////////////// writeEvent  //////////////////////////
function writeEvent(app, event, gid, player, playerid, detail){
  logger('writing event '+event);
  sendTrigger(event,gid,detail,playerid, player);
  sendConf(event, gid, detail, playerid, player);
    var constants = conf.events.collection('constants');
    var events = conf.events.collection('events');
constants.find({app:app, event:event}).toArray(function(e,d){
  if(e)
  {
    console.log('Error Writing event '+e);
    return;
  }
  if(d.length){
    eventConst = d[0];
    //insert in the events
    var __data = {app:app, event:event, gid: gid, player: player, playerid: playerid};
    for(var i in eventConst.details)
    {
      __data[eventConst.details[i]] =  detail[eventConst.details[i]];
      console.log(eventConst.details[i], detail[eventConst.details[i]])
    }
    if(detail.ref)
      __data.ref = detail.ref;

    if(detail.ts)
      __data.ts = detail.ts
    else
      __data.ts = moment().unix();

    if(event == 'visit')
    {
      events.find({event:'visit', playerid: playerid}).count(function(e, count){
        if(!e && count)
        {
          __data.repeat = true;
        }
        __data.visitcount = count + 1;
        events.insert(__data, function(err, data){
              if(err){
                console.log("xxxx Server Error during insert in events xxxx", err);
                return false;
              }
              return true;
            });//insert in events
      })
    }
    else {
      events.insert(__data, function(err, data){
            if(err){
              console.log("xxxx Server Error during insert in events xxxx", err);
              return false;
            }
            return true;
          });//insert in events
    }

  }// if valid data
});//find
}//writeEvent
